#ifdef RASPBERRY_PI
{"nano", [](c4::yml::ConstNodeRef options) -> method_factory_t<S> {
    int vec_width_bits; options["vec_width_bits"] >> vec_width_bits;
    std::string arch; options["arch"] >> arch;
    std::string mapping_id; options["mapping_id"] >> mapping_id;

    int nr = -1;
    if (options.has_child("nr"))
      options["nr"] >> nr;

    int outer_schedule = 0;
    if (options.has_child("outer_schedule"))
      options["outer_schedule"] >> outer_schedule;

    bool packed = false;
    if (options.has_child("packed"))
      options["packed"] >> packed;

    bool load_balance = false;
    if (options.has_child("load_balance"))
      options["load_balance"] >> load_balance;

    return [arch, vec_width_bits, nr, packed, load_balance, mapping_id, outer_schedule](
      additional_options_t options, SpMMTask<S>& task)
        -> SpMMFunctor<S>* {

      std::string mapping_id_mut = mapping_id;

      if (mapping_id == "filelist") {
        mapping_id_mut = options["mapping_id"];
      }

      ERROR_AND_EXIT_IF(packed && load_balance,
        "Packing and load-balance are not currently "
        "supported together");

      if (load_balance) {
        return new SpMM_SOP<sop::KD_PILoadBalanced<Scalar>>
          (get_executor_id(mapping_id_mut, arch, vec_width_bits, nr), mapping_id_mut, task, outer_schedule);
      } else {
        return new SpMM_SOP<sop::KD_PI<Scalar>>
          (get_executor_id(mapping_id_mut, arch, vec_width_bits, nr), mapping_id_mut, task, outer_schedule);
      }

      return nullptr;
    };
}}
#else
{"nano", [](c4::yml::ConstNodeRef options) -> method_factory_t<S> {
    int vec_width_bits; options["vec_width_bits"] >> vec_width_bits;
    std::string arch; options["arch"] >> arch;
    std::string mapping_id; options["mapping_id"] >> mapping_id;

    int nr = -1;
    if (options.has_child("nr"))
      options["nr"] >> nr;

    bool packed = false;
    if (options.has_child("packed"))
      options["packed"] >> packed;

    bool load_balance = false;
    if (options.has_child("load_balance"))
      options["load_balance"] >> load_balance;

    int outer_schedule = 0;
    if (options.has_child("outer_schedule"))
      options["outer_schedule"] >> outer_schedule;

    bool datatransform = true;
    if (options.has_child("datatransform"))
      options["datatransform"] >> datatransform;

    return [arch, vec_width_bits, datatransform, nr, packed, load_balance, mapping_id, outer_schedule](
      additional_options_t options, SpMMTask<S>& task)
        -> SpMMFunctor<S>* {

      std::string mapping_id_mut = mapping_id;

      if (mapping_id == "filelist") {
        mapping_id_mut = options["mapping_id"];
      }

      if (datatransform) {
        if (load_balance) {
            return new SpMM_SOP<sop::KD_IntelLoadBalanced<S>, true>
              (get_executor_id(mapping_id_mut, arch, vec_width_bits, nr), mapping_id_mut, task, outer_schedule);
        } else {
            return new SpMM_SOP<sop::KD_Intel<S>, true>
              (get_executor_id(mapping_id_mut, arch, vec_width_bits, nr), mapping_id_mut, task, outer_schedule);
        }
      } else {
        if (load_balance) {
            return new SpMM_SOP<sop::KD_IntelLoadBalanced<S>, false>
              (get_executor_id(mapping_id_mut, arch, vec_width_bits, nr), mapping_id_mut, task, outer_schedule);
        } else {
            return new SpMM_SOP<sop::KD_Intel<S>, false>
              (get_executor_id(mapping_id_mut, arch, vec_width_bits, nr), mapping_id_mut, task, outer_schedule);
        }
      }

      return nullptr;
    };
}}
#endif