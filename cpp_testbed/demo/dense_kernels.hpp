
template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_4_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[4];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 4; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_4_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[4];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 4; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_4_x_4(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[4];
    VecType cVecK0;
    VecType cVecK1;
    VecType cVecK2;
    VecType cVecK3;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 4; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 4) {
       VecType bVec0;
       VecType bVec1;
       VecType bVec2;
       VecType bVec3;
       VecType cVec00;
       VecType cVec01;
       VecType cVec02;
       VecType cVec03;
       VecType cVec10;
       VecType cVec11;
       VecType cVec12;
       VecType cVec13;
       VecType cVec20;
       VecType cVec21;
       VecType cVec22;
       VecType cVec23;
       VecType cVec30;
       VecType cVec31;
       VecType cVec32;
       VecType cVec33;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec02.load(C_ptrs[0] + 2 * VecType::size());
       cVec03.load(C_ptrs[0] + 3 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec12.load(C_ptrs[1] + 2 * VecType::size());
       cVec13.load(C_ptrs[1] + 3 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec22.load(C_ptrs[2] + 2 * VecType::size());
       cVec23.load(C_ptrs[2] + 3 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec32.load(C_ptrs[3] + 2 * VecType::size());
       cVec33.load(C_ptrs[3] + 3 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       bVec2.load(B_ptrs[0] + 2 * VecType::size());
       bVec3.load(B_ptrs[0] + 3 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       bVec2.load(B_ptrs[1] + 2 * VecType::size());
       bVec3.load(B_ptrs[1] + 3 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       bVec2.load(B_ptrs[2] + 2 * VecType::size());
       bVec3.load(B_ptrs[2] + 3 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       bVec2.load(B_ptrs[3] + 2 * VecType::size());
       bVec3.load(B_ptrs[3] + 3 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec02.store(C_ptrs[0] + 2 * VecType::size());
       cVec03.store(C_ptrs[0] + 3 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec12.store(C_ptrs[1] + 2 * VecType::size());
       cVec13.store(C_ptrs[1] + 3 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec22.store(C_ptrs[2] + 2 * VecType::size());
       cVec23.store(C_ptrs[2] + 3 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec32.store(C_ptrs[3] + 2 * VecType::size());
       cVec33.store(C_ptrs[3] + 3 * VecType::size());
       C_ptrs[0] += VecType::size() * 4;
       C_ptrs[1] += VecType::size() * 4;
       C_ptrs[2] += VecType::size() * 4;
       C_ptrs[3] += VecType::size() * 4;
       B_ptrs[0] += VecType::size() * 4;
       B_ptrs[1] += VecType::size() * 4;
       B_ptrs[2] += VecType::size() * 4;
       B_ptrs[3] += VecType::size() * 4;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_8_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[8];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 8; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_8_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[8];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 8; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_8_x_4(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[8];
    VecType cVecK0;
    VecType cVecK1;
    VecType cVecK2;
    VecType cVecK3;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 8; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 4) {
       VecType bVec0;
       VecType bVec1;
       VecType bVec2;
       VecType bVec3;
       VecType cVec00;
       VecType cVec01;
       VecType cVec02;
       VecType cVec03;
       VecType cVec10;
       VecType cVec11;
       VecType cVec12;
       VecType cVec13;
       VecType cVec20;
       VecType cVec21;
       VecType cVec22;
       VecType cVec23;
       VecType cVec30;
       VecType cVec31;
       VecType cVec32;
       VecType cVec33;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec02.load(C_ptrs[0] + 2 * VecType::size());
       cVec03.load(C_ptrs[0] + 3 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec12.load(C_ptrs[1] + 2 * VecType::size());
       cVec13.load(C_ptrs[1] + 3 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec22.load(C_ptrs[2] + 2 * VecType::size());
       cVec23.load(C_ptrs[2] + 3 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec32.load(C_ptrs[3] + 2 * VecType::size());
       cVec33.load(C_ptrs[3] + 3 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       bVec2.load(B_ptrs[0] + 2 * VecType::size());
       bVec3.load(B_ptrs[0] + 3 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       bVec2.load(B_ptrs[1] + 2 * VecType::size());
       bVec3.load(B_ptrs[1] + 3 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       bVec2.load(B_ptrs[2] + 2 * VecType::size());
       bVec3.load(B_ptrs[2] + 3 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       bVec2.load(B_ptrs[3] + 2 * VecType::size());
       bVec3.load(B_ptrs[3] + 3 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       bVec2.load(B_ptrs[4] + 2 * VecType::size());
       bVec3.load(B_ptrs[4] + 3 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       bVec2.load(B_ptrs[5] + 2 * VecType::size());
       bVec3.load(B_ptrs[5] + 3 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       bVec2.load(B_ptrs[6] + 2 * VecType::size());
       bVec3.load(B_ptrs[6] + 3 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       bVec2.load(B_ptrs[7] + 2 * VecType::size());
       bVec3.load(B_ptrs[7] + 3 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec02.store(C_ptrs[0] + 2 * VecType::size());
       cVec03.store(C_ptrs[0] + 3 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec12.store(C_ptrs[1] + 2 * VecType::size());
       cVec13.store(C_ptrs[1] + 3 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec22.store(C_ptrs[2] + 2 * VecType::size());
       cVec23.store(C_ptrs[2] + 3 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec32.store(C_ptrs[3] + 2 * VecType::size());
       cVec33.store(C_ptrs[3] + 3 * VecType::size());
       C_ptrs[0] += VecType::size() * 4;
       C_ptrs[1] += VecType::size() * 4;
       C_ptrs[2] += VecType::size() * 4;
       C_ptrs[3] += VecType::size() * 4;
       B_ptrs[0] += VecType::size() * 4;
       B_ptrs[1] += VecType::size() * 4;
       B_ptrs[2] += VecType::size() * 4;
       B_ptrs[3] += VecType::size() * 4;
       B_ptrs[4] += VecType::size() * 4;
       B_ptrs[5] += VecType::size() * 4;
       B_ptrs[6] += VecType::size() * 4;
       B_ptrs[7] += VecType::size() * 4;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_10_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[10];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 10; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
       B_ptrs[8] += VecType::size() * 1;
       B_ptrs[9] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_10_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[10];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 10; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
       B_ptrs[8] += VecType::size() * 2;
       B_ptrs[9] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_10_x_4(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[10];
    VecType cVecK0;
    VecType cVecK1;
    VecType cVecK2;
    VecType cVecK3;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 10; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 4) {
       VecType bVec0;
       VecType bVec1;
       VecType bVec2;
       VecType bVec3;
       VecType cVec00;
       VecType cVec01;
       VecType cVec02;
       VecType cVec03;
       VecType cVec10;
       VecType cVec11;
       VecType cVec12;
       VecType cVec13;
       VecType cVec20;
       VecType cVec21;
       VecType cVec22;
       VecType cVec23;
       VecType cVec30;
       VecType cVec31;
       VecType cVec32;
       VecType cVec33;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec02.load(C_ptrs[0] + 2 * VecType::size());
       cVec03.load(C_ptrs[0] + 3 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec12.load(C_ptrs[1] + 2 * VecType::size());
       cVec13.load(C_ptrs[1] + 3 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec22.load(C_ptrs[2] + 2 * VecType::size());
       cVec23.load(C_ptrs[2] + 3 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec32.load(C_ptrs[3] + 2 * VecType::size());
       cVec33.load(C_ptrs[3] + 3 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       bVec2.load(B_ptrs[0] + 2 * VecType::size());
       bVec3.load(B_ptrs[0] + 3 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       bVec2.load(B_ptrs[1] + 2 * VecType::size());
       bVec3.load(B_ptrs[1] + 3 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       bVec2.load(B_ptrs[2] + 2 * VecType::size());
       bVec3.load(B_ptrs[2] + 3 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       bVec2.load(B_ptrs[3] + 2 * VecType::size());
       bVec3.load(B_ptrs[3] + 3 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       bVec2.load(B_ptrs[4] + 2 * VecType::size());
       bVec3.load(B_ptrs[4] + 3 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       bVec2.load(B_ptrs[5] + 2 * VecType::size());
       bVec3.load(B_ptrs[5] + 3 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       bVec2.load(B_ptrs[6] + 2 * VecType::size());
       bVec3.load(B_ptrs[6] + 3 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       bVec2.load(B_ptrs[7] + 2 * VecType::size());
       bVec3.load(B_ptrs[7] + 3 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       bVec2.load(B_ptrs[8] + 2 * VecType::size());
       bVec3.load(B_ptrs[8] + 3 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       bVec2.load(B_ptrs[9] + 2 * VecType::size());
       bVec3.load(B_ptrs[9] + 3 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec02.store(C_ptrs[0] + 2 * VecType::size());
       cVec03.store(C_ptrs[0] + 3 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec12.store(C_ptrs[1] + 2 * VecType::size());
       cVec13.store(C_ptrs[1] + 3 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec22.store(C_ptrs[2] + 2 * VecType::size());
       cVec23.store(C_ptrs[2] + 3 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec32.store(C_ptrs[3] + 2 * VecType::size());
       cVec33.store(C_ptrs[3] + 3 * VecType::size());
       C_ptrs[0] += VecType::size() * 4;
       C_ptrs[1] += VecType::size() * 4;
       C_ptrs[2] += VecType::size() * 4;
       C_ptrs[3] += VecType::size() * 4;
       B_ptrs[0] += VecType::size() * 4;
       B_ptrs[1] += VecType::size() * 4;
       B_ptrs[2] += VecType::size() * 4;
       B_ptrs[3] += VecType::size() * 4;
       B_ptrs[4] += VecType::size() * 4;
       B_ptrs[5] += VecType::size() * 4;
       B_ptrs[6] += VecType::size() * 4;
       B_ptrs[7] += VecType::size() * 4;
       B_ptrs[8] += VecType::size() * 4;
       B_ptrs[9] += VecType::size() * 4;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_12_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[12];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 12; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
       B_ptrs[8] += VecType::size() * 1;
       B_ptrs[9] += VecType::size() * 1;
       B_ptrs[10] += VecType::size() * 1;
       B_ptrs[11] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_12_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[12];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 12; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
       B_ptrs[8] += VecType::size() * 2;
       B_ptrs[9] += VecType::size() * 2;
       B_ptrs[10] += VecType::size() * 2;
       B_ptrs[11] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_12_x_4(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[12];
    VecType cVecK0;
    VecType cVecK1;
    VecType cVecK2;
    VecType cVecK3;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 12; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 4) {
       VecType bVec0;
       VecType bVec1;
       VecType bVec2;
       VecType bVec3;
       VecType cVec00;
       VecType cVec01;
       VecType cVec02;
       VecType cVec03;
       VecType cVec10;
       VecType cVec11;
       VecType cVec12;
       VecType cVec13;
       VecType cVec20;
       VecType cVec21;
       VecType cVec22;
       VecType cVec23;
       VecType cVec30;
       VecType cVec31;
       VecType cVec32;
       VecType cVec33;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec02.load(C_ptrs[0] + 2 * VecType::size());
       cVec03.load(C_ptrs[0] + 3 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec12.load(C_ptrs[1] + 2 * VecType::size());
       cVec13.load(C_ptrs[1] + 3 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec22.load(C_ptrs[2] + 2 * VecType::size());
       cVec23.load(C_ptrs[2] + 3 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec32.load(C_ptrs[3] + 2 * VecType::size());
       cVec33.load(C_ptrs[3] + 3 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       bVec2.load(B_ptrs[0] + 2 * VecType::size());
       bVec3.load(B_ptrs[0] + 3 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       bVec2.load(B_ptrs[1] + 2 * VecType::size());
       bVec3.load(B_ptrs[1] + 3 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       bVec2.load(B_ptrs[2] + 2 * VecType::size());
       bVec3.load(B_ptrs[2] + 3 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       bVec2.load(B_ptrs[3] + 2 * VecType::size());
       bVec3.load(B_ptrs[3] + 3 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       bVec2.load(B_ptrs[4] + 2 * VecType::size());
       bVec3.load(B_ptrs[4] + 3 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       bVec2.load(B_ptrs[5] + 2 * VecType::size());
       bVec3.load(B_ptrs[5] + 3 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       bVec2.load(B_ptrs[6] + 2 * VecType::size());
       bVec3.load(B_ptrs[6] + 3 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       bVec2.load(B_ptrs[7] + 2 * VecType::size());
       bVec3.load(B_ptrs[7] + 3 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       bVec2.load(B_ptrs[8] + 2 * VecType::size());
       bVec3.load(B_ptrs[8] + 3 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       bVec2.load(B_ptrs[9] + 2 * VecType::size());
       bVec3.load(B_ptrs[9] + 3 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       bVec2.load(B_ptrs[10] + 2 * VecType::size());
       bVec3.load(B_ptrs[10] + 3 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       bVec2.load(B_ptrs[11] + 2 * VecType::size());
       bVec3.load(B_ptrs[11] + 3 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec02.store(C_ptrs[0] + 2 * VecType::size());
       cVec03.store(C_ptrs[0] + 3 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec12.store(C_ptrs[1] + 2 * VecType::size());
       cVec13.store(C_ptrs[1] + 3 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec22.store(C_ptrs[2] + 2 * VecType::size());
       cVec23.store(C_ptrs[2] + 3 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec32.store(C_ptrs[3] + 2 * VecType::size());
       cVec33.store(C_ptrs[3] + 3 * VecType::size());
       C_ptrs[0] += VecType::size() * 4;
       C_ptrs[1] += VecType::size() * 4;
       C_ptrs[2] += VecType::size() * 4;
       C_ptrs[3] += VecType::size() * 4;
       B_ptrs[0] += VecType::size() * 4;
       B_ptrs[1] += VecType::size() * 4;
       B_ptrs[2] += VecType::size() * 4;
       B_ptrs[3] += VecType::size() * 4;
       B_ptrs[4] += VecType::size() * 4;
       B_ptrs[5] += VecType::size() * 4;
       B_ptrs[6] += VecType::size() * 4;
       B_ptrs[7] += VecType::size() * 4;
       B_ptrs[8] += VecType::size() * 4;
       B_ptrs[9] += VecType::size() * 4;
       B_ptrs[10] += VecType::size() * 4;
       B_ptrs[11] += VecType::size() * 4;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_16_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[16];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 16; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       aVec0 = VecType(values[12 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[12 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[12 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[12 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       aVec0 = VecType(values[13 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[13 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[13 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[13 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       aVec0 = VecType(values[14 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[14 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[14 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[14 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       aVec0 = VecType(values[15 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[15 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[15 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[15 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
       B_ptrs[8] += VecType::size() * 1;
       B_ptrs[9] += VecType::size() * 1;
       B_ptrs[10] += VecType::size() * 1;
       B_ptrs[11] += VecType::size() * 1;
       B_ptrs[12] += VecType::size() * 1;
       B_ptrs[13] += VecType::size() * 1;
       B_ptrs[14] += VecType::size() * 1;
       B_ptrs[15] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_16_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[16];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 16; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       bVec1.load(B_ptrs[12] + 1 * VecType::size());
       aVec0 = VecType(values[12 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[12 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[12 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[12 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       bVec1.load(B_ptrs[13] + 1 * VecType::size());
       aVec0 = VecType(values[13 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[13 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[13 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[13 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       bVec1.load(B_ptrs[14] + 1 * VecType::size());
       aVec0 = VecType(values[14 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[14 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[14 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[14 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       bVec1.load(B_ptrs[15] + 1 * VecType::size());
       aVec0 = VecType(values[15 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[15 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[15 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[15 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
       B_ptrs[8] += VecType::size() * 2;
       B_ptrs[9] += VecType::size() * 2;
       B_ptrs[10] += VecType::size() * 2;
       B_ptrs[11] += VecType::size() * 2;
       B_ptrs[12] += VecType::size() * 2;
       B_ptrs[13] += VecType::size() * 2;
       B_ptrs[14] += VecType::size() * 2;
       B_ptrs[15] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_16_x_4(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[16];
    VecType cVecK0;
    VecType cVecK1;
    VecType cVecK2;
    VecType cVecK3;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 16; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 4) {
       VecType bVec0;
       VecType bVec1;
       VecType bVec2;
       VecType bVec3;
       VecType cVec00;
       VecType cVec01;
       VecType cVec02;
       VecType cVec03;
       VecType cVec10;
       VecType cVec11;
       VecType cVec12;
       VecType cVec13;
       VecType cVec20;
       VecType cVec21;
       VecType cVec22;
       VecType cVec23;
       VecType cVec30;
       VecType cVec31;
       VecType cVec32;
       VecType cVec33;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec02.load(C_ptrs[0] + 2 * VecType::size());
       cVec03.load(C_ptrs[0] + 3 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec12.load(C_ptrs[1] + 2 * VecType::size());
       cVec13.load(C_ptrs[1] + 3 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec22.load(C_ptrs[2] + 2 * VecType::size());
       cVec23.load(C_ptrs[2] + 3 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec32.load(C_ptrs[3] + 2 * VecType::size());
       cVec33.load(C_ptrs[3] + 3 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       bVec2.load(B_ptrs[0] + 2 * VecType::size());
       bVec3.load(B_ptrs[0] + 3 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       bVec2.load(B_ptrs[1] + 2 * VecType::size());
       bVec3.load(B_ptrs[1] + 3 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       bVec2.load(B_ptrs[2] + 2 * VecType::size());
       bVec3.load(B_ptrs[2] + 3 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       bVec2.load(B_ptrs[3] + 2 * VecType::size());
       bVec3.load(B_ptrs[3] + 3 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       bVec2.load(B_ptrs[4] + 2 * VecType::size());
       bVec3.load(B_ptrs[4] + 3 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       bVec2.load(B_ptrs[5] + 2 * VecType::size());
       bVec3.load(B_ptrs[5] + 3 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       bVec2.load(B_ptrs[6] + 2 * VecType::size());
       bVec3.load(B_ptrs[6] + 3 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       bVec2.load(B_ptrs[7] + 2 * VecType::size());
       bVec3.load(B_ptrs[7] + 3 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       bVec2.load(B_ptrs[8] + 2 * VecType::size());
       bVec3.load(B_ptrs[8] + 3 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       bVec2.load(B_ptrs[9] + 2 * VecType::size());
       bVec3.load(B_ptrs[9] + 3 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       bVec2.load(B_ptrs[10] + 2 * VecType::size());
       bVec3.load(B_ptrs[10] + 3 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       bVec2.load(B_ptrs[11] + 2 * VecType::size());
       bVec3.load(B_ptrs[11] + 3 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       bVec1.load(B_ptrs[12] + 1 * VecType::size());
       bVec2.load(B_ptrs[12] + 2 * VecType::size());
       bVec3.load(B_ptrs[12] + 3 * VecType::size());
       aVec0 = VecType(values[12 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[12 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[12 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[12 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       bVec1.load(B_ptrs[13] + 1 * VecType::size());
       bVec2.load(B_ptrs[13] + 2 * VecType::size());
       bVec3.load(B_ptrs[13] + 3 * VecType::size());
       aVec0 = VecType(values[13 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[13 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[13 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[13 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       bVec1.load(B_ptrs[14] + 1 * VecType::size());
       bVec2.load(B_ptrs[14] + 2 * VecType::size());
       bVec3.load(B_ptrs[14] + 3 * VecType::size());
       aVec0 = VecType(values[14 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[14 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[14 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[14 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       bVec1.load(B_ptrs[15] + 1 * VecType::size());
       bVec2.load(B_ptrs[15] + 2 * VecType::size());
       bVec3.load(B_ptrs[15] + 3 * VecType::size());
       aVec0 = VecType(values[15 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[15 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[15 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[15 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec02.store(C_ptrs[0] + 2 * VecType::size());
       cVec03.store(C_ptrs[0] + 3 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec12.store(C_ptrs[1] + 2 * VecType::size());
       cVec13.store(C_ptrs[1] + 3 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec22.store(C_ptrs[2] + 2 * VecType::size());
       cVec23.store(C_ptrs[2] + 3 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec32.store(C_ptrs[3] + 2 * VecType::size());
       cVec33.store(C_ptrs[3] + 3 * VecType::size());
       C_ptrs[0] += VecType::size() * 4;
       C_ptrs[1] += VecType::size() * 4;
       C_ptrs[2] += VecType::size() * 4;
       C_ptrs[3] += VecType::size() * 4;
       B_ptrs[0] += VecType::size() * 4;
       B_ptrs[1] += VecType::size() * 4;
       B_ptrs[2] += VecType::size() * 4;
       B_ptrs[3] += VecType::size() * 4;
       B_ptrs[4] += VecType::size() * 4;
       B_ptrs[5] += VecType::size() * 4;
       B_ptrs[6] += VecType::size() * 4;
       B_ptrs[7] += VecType::size() * 4;
       B_ptrs[8] += VecType::size() * 4;
       B_ptrs[9] += VecType::size() * 4;
       B_ptrs[10] += VecType::size() * 4;
       B_ptrs[11] += VecType::size() * 4;
       B_ptrs[12] += VecType::size() * 4;
       B_ptrs[13] += VecType::size() * 4;
       B_ptrs[14] += VecType::size() * 4;
       B_ptrs[15] += VecType::size() * 4;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_32_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[32];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 32; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;
    VecType aVec16;
    VecType aVec17;
    VecType aVec18;
    VecType aVec19;
    VecType aVec20;
    VecType aVec21;
    VecType aVec22;
    VecType aVec23;
    VecType aVec24;
    VecType aVec25;
    VecType aVec26;
    VecType aVec27;
    VecType aVec28;
    VecType aVec29;
    VecType aVec30;
    VecType aVec31;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       aVec0 = VecType(values[12 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[12 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[12 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[12 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       aVec0 = VecType(values[13 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[13 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[13 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[13 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       aVec0 = VecType(values[14 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[14 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[14 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[14 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       aVec0 = VecType(values[15 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[15 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[15 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[15 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[16] + 0 * VecType::size());
       aVec0 = VecType(values[16 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[16 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[16 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[16 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[17] + 0 * VecType::size());
       aVec0 = VecType(values[17 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[17 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[17 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[17 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[18] + 0 * VecType::size());
       aVec0 = VecType(values[18 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[18 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[18 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[18 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[19] + 0 * VecType::size());
       aVec0 = VecType(values[19 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[19 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[19 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[19 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[20] + 0 * VecType::size());
       aVec0 = VecType(values[20 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[20 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[20 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[20 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[21] + 0 * VecType::size());
       aVec0 = VecType(values[21 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[21 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[21 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[21 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[22] + 0 * VecType::size());
       aVec0 = VecType(values[22 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[22 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[22 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[22 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[23] + 0 * VecType::size());
       aVec0 = VecType(values[23 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[23 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[23 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[23 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[24] + 0 * VecType::size());
       aVec0 = VecType(values[24 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[24 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[24 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[24 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[25] + 0 * VecType::size());
       aVec0 = VecType(values[25 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[25 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[25 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[25 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[26] + 0 * VecType::size());
       aVec0 = VecType(values[26 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[26 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[26 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[26 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[27] + 0 * VecType::size());
       aVec0 = VecType(values[27 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[27 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[27 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[27 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[28] + 0 * VecType::size());
       aVec0 = VecType(values[28 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[28 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[28 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[28 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[29] + 0 * VecType::size());
       aVec0 = VecType(values[29 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[29 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[29 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[29 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[30] + 0 * VecType::size());
       aVec0 = VecType(values[30 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[30 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[30 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[30 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[31] + 0 * VecType::size());
       aVec0 = VecType(values[31 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[31 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[31 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[31 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
       B_ptrs[8] += VecType::size() * 1;
       B_ptrs[9] += VecType::size() * 1;
       B_ptrs[10] += VecType::size() * 1;
       B_ptrs[11] += VecType::size() * 1;
       B_ptrs[12] += VecType::size() * 1;
       B_ptrs[13] += VecType::size() * 1;
       B_ptrs[14] += VecType::size() * 1;
       B_ptrs[15] += VecType::size() * 1;
       B_ptrs[16] += VecType::size() * 1;
       B_ptrs[17] += VecType::size() * 1;
       B_ptrs[18] += VecType::size() * 1;
       B_ptrs[19] += VecType::size() * 1;
       B_ptrs[20] += VecType::size() * 1;
       B_ptrs[21] += VecType::size() * 1;
       B_ptrs[22] += VecType::size() * 1;
       B_ptrs[23] += VecType::size() * 1;
       B_ptrs[24] += VecType::size() * 1;
       B_ptrs[25] += VecType::size() * 1;
       B_ptrs[26] += VecType::size() * 1;
       B_ptrs[27] += VecType::size() * 1;
       B_ptrs[28] += VecType::size() * 1;
       B_ptrs[29] += VecType::size() * 1;
       B_ptrs[30] += VecType::size() * 1;
       B_ptrs[31] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_32_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[32];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 32; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;
    VecType aVec16;
    VecType aVec17;
    VecType aVec18;
    VecType aVec19;
    VecType aVec20;
    VecType aVec21;
    VecType aVec22;
    VecType aVec23;
    VecType aVec24;
    VecType aVec25;
    VecType aVec26;
    VecType aVec27;
    VecType aVec28;
    VecType aVec29;
    VecType aVec30;
    VecType aVec31;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       bVec1.load(B_ptrs[12] + 1 * VecType::size());
       aVec0 = VecType(values[12 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[12 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[12 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[12 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       bVec1.load(B_ptrs[13] + 1 * VecType::size());
       aVec0 = VecType(values[13 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[13 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[13 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[13 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       bVec1.load(B_ptrs[14] + 1 * VecType::size());
       aVec0 = VecType(values[14 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[14 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[14 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[14 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       bVec1.load(B_ptrs[15] + 1 * VecType::size());
       aVec0 = VecType(values[15 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[15 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[15 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[15 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[16] + 0 * VecType::size());
       bVec1.load(B_ptrs[16] + 1 * VecType::size());
       aVec0 = VecType(values[16 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[16 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[16 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[16 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[17] + 0 * VecType::size());
       bVec1.load(B_ptrs[17] + 1 * VecType::size());
       aVec0 = VecType(values[17 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[17 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[17 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[17 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[18] + 0 * VecType::size());
       bVec1.load(B_ptrs[18] + 1 * VecType::size());
       aVec0 = VecType(values[18 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[18 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[18 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[18 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[19] + 0 * VecType::size());
       bVec1.load(B_ptrs[19] + 1 * VecType::size());
       aVec0 = VecType(values[19 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[19 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[19 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[19 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[20] + 0 * VecType::size());
       bVec1.load(B_ptrs[20] + 1 * VecType::size());
       aVec0 = VecType(values[20 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[20 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[20 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[20 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[21] + 0 * VecType::size());
       bVec1.load(B_ptrs[21] + 1 * VecType::size());
       aVec0 = VecType(values[21 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[21 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[21 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[21 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[22] + 0 * VecType::size());
       bVec1.load(B_ptrs[22] + 1 * VecType::size());
       aVec0 = VecType(values[22 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[22 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[22 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[22 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[23] + 0 * VecType::size());
       bVec1.load(B_ptrs[23] + 1 * VecType::size());
       aVec0 = VecType(values[23 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[23 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[23 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[23 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[24] + 0 * VecType::size());
       bVec1.load(B_ptrs[24] + 1 * VecType::size());
       aVec0 = VecType(values[24 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[24 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[24 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[24 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[25] + 0 * VecType::size());
       bVec1.load(B_ptrs[25] + 1 * VecType::size());
       aVec0 = VecType(values[25 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[25 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[25 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[25 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[26] + 0 * VecType::size());
       bVec1.load(B_ptrs[26] + 1 * VecType::size());
       aVec0 = VecType(values[26 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[26 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[26 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[26 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[27] + 0 * VecType::size());
       bVec1.load(B_ptrs[27] + 1 * VecType::size());
       aVec0 = VecType(values[27 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[27 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[27 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[27 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[28] + 0 * VecType::size());
       bVec1.load(B_ptrs[28] + 1 * VecType::size());
       aVec0 = VecType(values[28 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[28 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[28 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[28 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[29] + 0 * VecType::size());
       bVec1.load(B_ptrs[29] + 1 * VecType::size());
       aVec0 = VecType(values[29 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[29 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[29 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[29 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[30] + 0 * VecType::size());
       bVec1.load(B_ptrs[30] + 1 * VecType::size());
       aVec0 = VecType(values[30 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[30 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[30 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[30 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[31] + 0 * VecType::size());
       bVec1.load(B_ptrs[31] + 1 * VecType::size());
       aVec0 = VecType(values[31 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[31 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[31 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[31 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
       B_ptrs[8] += VecType::size() * 2;
       B_ptrs[9] += VecType::size() * 2;
       B_ptrs[10] += VecType::size() * 2;
       B_ptrs[11] += VecType::size() * 2;
       B_ptrs[12] += VecType::size() * 2;
       B_ptrs[13] += VecType::size() * 2;
       B_ptrs[14] += VecType::size() * 2;
       B_ptrs[15] += VecType::size() * 2;
       B_ptrs[16] += VecType::size() * 2;
       B_ptrs[17] += VecType::size() * 2;
       B_ptrs[18] += VecType::size() * 2;
       B_ptrs[19] += VecType::size() * 2;
       B_ptrs[20] += VecType::size() * 2;
       B_ptrs[21] += VecType::size() * 2;
       B_ptrs[22] += VecType::size() * 2;
       B_ptrs[23] += VecType::size() * 2;
       B_ptrs[24] += VecType::size() * 2;
       B_ptrs[25] += VecType::size() * 2;
       B_ptrs[26] += VecType::size() * 2;
       B_ptrs[27] += VecType::size() * 2;
       B_ptrs[28] += VecType::size() * 2;
       B_ptrs[29] += VecType::size() * 2;
       B_ptrs[30] += VecType::size() * 2;
       B_ptrs[31] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_32_x_4(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[32];
    VecType cVecK0;
    VecType cVecK1;
    VecType cVecK2;
    VecType cVecK3;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 32; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;
    VecType aVec16;
    VecType aVec17;
    VecType aVec18;
    VecType aVec19;
    VecType aVec20;
    VecType aVec21;
    VecType aVec22;
    VecType aVec23;
    VecType aVec24;
    VecType aVec25;
    VecType aVec26;
    VecType aVec27;
    VecType aVec28;
    VecType aVec29;
    VecType aVec30;
    VecType aVec31;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 4) {
       VecType bVec0;
       VecType bVec1;
       VecType bVec2;
       VecType bVec3;
       VecType cVec00;
       VecType cVec01;
       VecType cVec02;
       VecType cVec03;
       VecType cVec10;
       VecType cVec11;
       VecType cVec12;
       VecType cVec13;
       VecType cVec20;
       VecType cVec21;
       VecType cVec22;
       VecType cVec23;
       VecType cVec30;
       VecType cVec31;
       VecType cVec32;
       VecType cVec33;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec02.load(C_ptrs[0] + 2 * VecType::size());
       cVec03.load(C_ptrs[0] + 3 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec12.load(C_ptrs[1] + 2 * VecType::size());
       cVec13.load(C_ptrs[1] + 3 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec22.load(C_ptrs[2] + 2 * VecType::size());
       cVec23.load(C_ptrs[2] + 3 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec32.load(C_ptrs[3] + 2 * VecType::size());
       cVec33.load(C_ptrs[3] + 3 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       bVec2.load(B_ptrs[0] + 2 * VecType::size());
       bVec3.load(B_ptrs[0] + 3 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       bVec2.load(B_ptrs[1] + 2 * VecType::size());
       bVec3.load(B_ptrs[1] + 3 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       bVec2.load(B_ptrs[2] + 2 * VecType::size());
       bVec3.load(B_ptrs[2] + 3 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       bVec2.load(B_ptrs[3] + 2 * VecType::size());
       bVec3.load(B_ptrs[3] + 3 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       bVec2.load(B_ptrs[4] + 2 * VecType::size());
       bVec3.load(B_ptrs[4] + 3 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       bVec2.load(B_ptrs[5] + 2 * VecType::size());
       bVec3.load(B_ptrs[5] + 3 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       bVec2.load(B_ptrs[6] + 2 * VecType::size());
       bVec3.load(B_ptrs[6] + 3 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       bVec2.load(B_ptrs[7] + 2 * VecType::size());
       bVec3.load(B_ptrs[7] + 3 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       bVec2.load(B_ptrs[8] + 2 * VecType::size());
       bVec3.load(B_ptrs[8] + 3 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       bVec2.load(B_ptrs[9] + 2 * VecType::size());
       bVec3.load(B_ptrs[9] + 3 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       bVec2.load(B_ptrs[10] + 2 * VecType::size());
       bVec3.load(B_ptrs[10] + 3 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       bVec2.load(B_ptrs[11] + 2 * VecType::size());
       bVec3.load(B_ptrs[11] + 3 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       bVec1.load(B_ptrs[12] + 1 * VecType::size());
       bVec2.load(B_ptrs[12] + 2 * VecType::size());
       bVec3.load(B_ptrs[12] + 3 * VecType::size());
       aVec0 = VecType(values[12 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[12 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[12 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[12 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       bVec1.load(B_ptrs[13] + 1 * VecType::size());
       bVec2.load(B_ptrs[13] + 2 * VecType::size());
       bVec3.load(B_ptrs[13] + 3 * VecType::size());
       aVec0 = VecType(values[13 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[13 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[13 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[13 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       bVec1.load(B_ptrs[14] + 1 * VecType::size());
       bVec2.load(B_ptrs[14] + 2 * VecType::size());
       bVec3.load(B_ptrs[14] + 3 * VecType::size());
       aVec0 = VecType(values[14 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[14 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[14 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[14 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       bVec1.load(B_ptrs[15] + 1 * VecType::size());
       bVec2.load(B_ptrs[15] + 2 * VecType::size());
       bVec3.load(B_ptrs[15] + 3 * VecType::size());
       aVec0 = VecType(values[15 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[15 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[15 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[15 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[16] + 0 * VecType::size());
       bVec1.load(B_ptrs[16] + 1 * VecType::size());
       bVec2.load(B_ptrs[16] + 2 * VecType::size());
       bVec3.load(B_ptrs[16] + 3 * VecType::size());
       aVec0 = VecType(values[16 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[16 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[16 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[16 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[17] + 0 * VecType::size());
       bVec1.load(B_ptrs[17] + 1 * VecType::size());
       bVec2.load(B_ptrs[17] + 2 * VecType::size());
       bVec3.load(B_ptrs[17] + 3 * VecType::size());
       aVec0 = VecType(values[17 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[17 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[17 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[17 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[18] + 0 * VecType::size());
       bVec1.load(B_ptrs[18] + 1 * VecType::size());
       bVec2.load(B_ptrs[18] + 2 * VecType::size());
       bVec3.load(B_ptrs[18] + 3 * VecType::size());
       aVec0 = VecType(values[18 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[18 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[18 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[18 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[19] + 0 * VecType::size());
       bVec1.load(B_ptrs[19] + 1 * VecType::size());
       bVec2.load(B_ptrs[19] + 2 * VecType::size());
       bVec3.load(B_ptrs[19] + 3 * VecType::size());
       aVec0 = VecType(values[19 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[19 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[19 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[19 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[20] + 0 * VecType::size());
       bVec1.load(B_ptrs[20] + 1 * VecType::size());
       bVec2.load(B_ptrs[20] + 2 * VecType::size());
       bVec3.load(B_ptrs[20] + 3 * VecType::size());
       aVec0 = VecType(values[20 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[20 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[20 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[20 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[21] + 0 * VecType::size());
       bVec1.load(B_ptrs[21] + 1 * VecType::size());
       bVec2.load(B_ptrs[21] + 2 * VecType::size());
       bVec3.load(B_ptrs[21] + 3 * VecType::size());
       aVec0 = VecType(values[21 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[21 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[21 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[21 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[22] + 0 * VecType::size());
       bVec1.load(B_ptrs[22] + 1 * VecType::size());
       bVec2.load(B_ptrs[22] + 2 * VecType::size());
       bVec3.load(B_ptrs[22] + 3 * VecType::size());
       aVec0 = VecType(values[22 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[22 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[22 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[22 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[23] + 0 * VecType::size());
       bVec1.load(B_ptrs[23] + 1 * VecType::size());
       bVec2.load(B_ptrs[23] + 2 * VecType::size());
       bVec3.load(B_ptrs[23] + 3 * VecType::size());
       aVec0 = VecType(values[23 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[23 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[23 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[23 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[24] + 0 * VecType::size());
       bVec1.load(B_ptrs[24] + 1 * VecType::size());
       bVec2.load(B_ptrs[24] + 2 * VecType::size());
       bVec3.load(B_ptrs[24] + 3 * VecType::size());
       aVec0 = VecType(values[24 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[24 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[24 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[24 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[25] + 0 * VecType::size());
       bVec1.load(B_ptrs[25] + 1 * VecType::size());
       bVec2.load(B_ptrs[25] + 2 * VecType::size());
       bVec3.load(B_ptrs[25] + 3 * VecType::size());
       aVec0 = VecType(values[25 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[25 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[25 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[25 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[26] + 0 * VecType::size());
       bVec1.load(B_ptrs[26] + 1 * VecType::size());
       bVec2.load(B_ptrs[26] + 2 * VecType::size());
       bVec3.load(B_ptrs[26] + 3 * VecType::size());
       aVec0 = VecType(values[26 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[26 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[26 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[26 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[27] + 0 * VecType::size());
       bVec1.load(B_ptrs[27] + 1 * VecType::size());
       bVec2.load(B_ptrs[27] + 2 * VecType::size());
       bVec3.load(B_ptrs[27] + 3 * VecType::size());
       aVec0 = VecType(values[27 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[27 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[27 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[27 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[28] + 0 * VecType::size());
       bVec1.load(B_ptrs[28] + 1 * VecType::size());
       bVec2.load(B_ptrs[28] + 2 * VecType::size());
       bVec3.load(B_ptrs[28] + 3 * VecType::size());
       aVec0 = VecType(values[28 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[28 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[28 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[28 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[29] + 0 * VecType::size());
       bVec1.load(B_ptrs[29] + 1 * VecType::size());
       bVec2.load(B_ptrs[29] + 2 * VecType::size());
       bVec3.load(B_ptrs[29] + 3 * VecType::size());
       aVec0 = VecType(values[29 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[29 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[29 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[29 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[30] + 0 * VecType::size());
       bVec1.load(B_ptrs[30] + 1 * VecType::size());
       bVec2.load(B_ptrs[30] + 2 * VecType::size());
       bVec3.load(B_ptrs[30] + 3 * VecType::size());
       aVec0 = VecType(values[30 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[30 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[30 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[30 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       bVec0.load(B_ptrs[31] + 0 * VecType::size());
       bVec1.load(B_ptrs[31] + 1 * VecType::size());
       bVec2.load(B_ptrs[31] + 2 * VecType::size());
       bVec3.load(B_ptrs[31] + 3 * VecType::size());
       aVec0 = VecType(values[31 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[31 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[31 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[31 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec02.store(C_ptrs[0] + 2 * VecType::size());
       cVec03.store(C_ptrs[0] + 3 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec12.store(C_ptrs[1] + 2 * VecType::size());
       cVec13.store(C_ptrs[1] + 3 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec22.store(C_ptrs[2] + 2 * VecType::size());
       cVec23.store(C_ptrs[2] + 3 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec32.store(C_ptrs[3] + 2 * VecType::size());
       cVec33.store(C_ptrs[3] + 3 * VecType::size());
       C_ptrs[0] += VecType::size() * 4;
       C_ptrs[1] += VecType::size() * 4;
       C_ptrs[2] += VecType::size() * 4;
       C_ptrs[3] += VecType::size() * 4;
       B_ptrs[0] += VecType::size() * 4;
       B_ptrs[1] += VecType::size() * 4;
       B_ptrs[2] += VecType::size() * 4;
       B_ptrs[3] += VecType::size() * 4;
       B_ptrs[4] += VecType::size() * 4;
       B_ptrs[5] += VecType::size() * 4;
       B_ptrs[6] += VecType::size() * 4;
       B_ptrs[7] += VecType::size() * 4;
       B_ptrs[8] += VecType::size() * 4;
       B_ptrs[9] += VecType::size() * 4;
       B_ptrs[10] += VecType::size() * 4;
       B_ptrs[11] += VecType::size() * 4;
       B_ptrs[12] += VecType::size() * 4;
       B_ptrs[13] += VecType::size() * 4;
       B_ptrs[14] += VecType::size() * 4;
       B_ptrs[15] += VecType::size() * 4;
       B_ptrs[16] += VecType::size() * 4;
       B_ptrs[17] += VecType::size() * 4;
       B_ptrs[18] += VecType::size() * 4;
       B_ptrs[19] += VecType::size() * 4;
       B_ptrs[20] += VecType::size() * 4;
       B_ptrs[21] += VecType::size() * 4;
       B_ptrs[22] += VecType::size() * 4;
       B_ptrs[23] += VecType::size() * 4;
       B_ptrs[24] += VecType::size() * 4;
       B_ptrs[25] += VecType::size() * 4;
       B_ptrs[26] += VecType::size() * 4;
       B_ptrs[27] += VecType::size() * 4;
       B_ptrs[28] += VecType::size() * 4;
       B_ptrs[29] += VecType::size() * 4;
       B_ptrs[30] += VecType::size() * 4;
       B_ptrs[31] += VecType::size() * 4;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_64_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[64];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 64; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;
    VecType aVec16;
    VecType aVec17;
    VecType aVec18;
    VecType aVec19;
    VecType aVec20;
    VecType aVec21;
    VecType aVec22;
    VecType aVec23;
    VecType aVec24;
    VecType aVec25;
    VecType aVec26;
    VecType aVec27;
    VecType aVec28;
    VecType aVec29;
    VecType aVec30;
    VecType aVec31;
    VecType aVec32;
    VecType aVec33;
    VecType aVec34;
    VecType aVec35;
    VecType aVec36;
    VecType aVec37;
    VecType aVec38;
    VecType aVec39;
    VecType aVec40;
    VecType aVec41;
    VecType aVec42;
    VecType aVec43;
    VecType aVec44;
    VecType aVec45;
    VecType aVec46;
    VecType aVec47;
    VecType aVec48;
    VecType aVec49;
    VecType aVec50;
    VecType aVec51;
    VecType aVec52;
    VecType aVec53;
    VecType aVec54;
    VecType aVec55;
    VecType aVec56;
    VecType aVec57;
    VecType aVec58;
    VecType aVec59;
    VecType aVec60;
    VecType aVec61;
    VecType aVec62;
    VecType aVec63;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       aVec0 = VecType(values[12 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[12 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[12 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[12 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       aVec0 = VecType(values[13 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[13 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[13 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[13 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       aVec0 = VecType(values[14 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[14 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[14 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[14 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       aVec0 = VecType(values[15 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[15 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[15 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[15 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[16] + 0 * VecType::size());
       aVec0 = VecType(values[16 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[16 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[16 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[16 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[17] + 0 * VecType::size());
       aVec0 = VecType(values[17 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[17 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[17 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[17 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[18] + 0 * VecType::size());
       aVec0 = VecType(values[18 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[18 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[18 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[18 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[19] + 0 * VecType::size());
       aVec0 = VecType(values[19 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[19 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[19 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[19 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[20] + 0 * VecType::size());
       aVec0 = VecType(values[20 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[20 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[20 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[20 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[21] + 0 * VecType::size());
       aVec0 = VecType(values[21 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[21 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[21 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[21 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[22] + 0 * VecType::size());
       aVec0 = VecType(values[22 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[22 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[22 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[22 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[23] + 0 * VecType::size());
       aVec0 = VecType(values[23 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[23 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[23 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[23 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[24] + 0 * VecType::size());
       aVec0 = VecType(values[24 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[24 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[24 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[24 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[25] + 0 * VecType::size());
       aVec0 = VecType(values[25 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[25 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[25 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[25 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[26] + 0 * VecType::size());
       aVec0 = VecType(values[26 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[26 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[26 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[26 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[27] + 0 * VecType::size());
       aVec0 = VecType(values[27 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[27 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[27 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[27 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[28] + 0 * VecType::size());
       aVec0 = VecType(values[28 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[28 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[28 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[28 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[29] + 0 * VecType::size());
       aVec0 = VecType(values[29 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[29 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[29 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[29 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[30] + 0 * VecType::size());
       aVec0 = VecType(values[30 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[30 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[30 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[30 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[31] + 0 * VecType::size());
       aVec0 = VecType(values[31 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[31 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[31 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[31 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[32] + 0 * VecType::size());
       aVec0 = VecType(values[32 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[32 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[32 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[32 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[33] + 0 * VecType::size());
       aVec0 = VecType(values[33 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[33 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[33 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[33 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[34] + 0 * VecType::size());
       aVec0 = VecType(values[34 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[34 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[34 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[34 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[35] + 0 * VecType::size());
       aVec0 = VecType(values[35 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[35 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[35 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[35 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[36] + 0 * VecType::size());
       aVec0 = VecType(values[36 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[36 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[36 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[36 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[37] + 0 * VecType::size());
       aVec0 = VecType(values[37 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[37 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[37 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[37 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[38] + 0 * VecType::size());
       aVec0 = VecType(values[38 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[38 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[38 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[38 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[39] + 0 * VecType::size());
       aVec0 = VecType(values[39 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[39 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[39 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[39 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[40] + 0 * VecType::size());
       aVec0 = VecType(values[40 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[40 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[40 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[40 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[41] + 0 * VecType::size());
       aVec0 = VecType(values[41 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[41 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[41 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[41 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[42] + 0 * VecType::size());
       aVec0 = VecType(values[42 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[42 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[42 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[42 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[43] + 0 * VecType::size());
       aVec0 = VecType(values[43 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[43 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[43 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[43 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[44] + 0 * VecType::size());
       aVec0 = VecType(values[44 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[44 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[44 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[44 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[45] + 0 * VecType::size());
       aVec0 = VecType(values[45 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[45 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[45 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[45 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[46] + 0 * VecType::size());
       aVec0 = VecType(values[46 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[46 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[46 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[46 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[47] + 0 * VecType::size());
       aVec0 = VecType(values[47 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[47 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[47 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[47 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[48] + 0 * VecType::size());
       aVec0 = VecType(values[48 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[48 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[48 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[48 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[49] + 0 * VecType::size());
       aVec0 = VecType(values[49 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[49 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[49 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[49 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[50] + 0 * VecType::size());
       aVec0 = VecType(values[50 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[50 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[50 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[50 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[51] + 0 * VecType::size());
       aVec0 = VecType(values[51 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[51 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[51 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[51 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[52] + 0 * VecType::size());
       aVec0 = VecType(values[52 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[52 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[52 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[52 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[53] + 0 * VecType::size());
       aVec0 = VecType(values[53 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[53 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[53 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[53 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[54] + 0 * VecType::size());
       aVec0 = VecType(values[54 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[54 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[54 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[54 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[55] + 0 * VecType::size());
       aVec0 = VecType(values[55 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[55 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[55 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[55 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[56] + 0 * VecType::size());
       aVec0 = VecType(values[56 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[56 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[56 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[56 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[57] + 0 * VecType::size());
       aVec0 = VecType(values[57 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[57 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[57 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[57 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[58] + 0 * VecType::size());
       aVec0 = VecType(values[58 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[58 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[58 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[58 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[59] + 0 * VecType::size());
       aVec0 = VecType(values[59 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[59 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[59 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[59 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[60] + 0 * VecType::size());
       aVec0 = VecType(values[60 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[60 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[60 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[60 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[61] + 0 * VecType::size());
       aVec0 = VecType(values[61 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[61 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[61 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[61 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[62] + 0 * VecType::size());
       aVec0 = VecType(values[62 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[62 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[62 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[62 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       bVec0.load(B_ptrs[63] + 0 * VecType::size());
       aVec0 = VecType(values[63 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[63 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[63 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[63 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
       B_ptrs[8] += VecType::size() * 1;
       B_ptrs[9] += VecType::size() * 1;
       B_ptrs[10] += VecType::size() * 1;
       B_ptrs[11] += VecType::size() * 1;
       B_ptrs[12] += VecType::size() * 1;
       B_ptrs[13] += VecType::size() * 1;
       B_ptrs[14] += VecType::size() * 1;
       B_ptrs[15] += VecType::size() * 1;
       B_ptrs[16] += VecType::size() * 1;
       B_ptrs[17] += VecType::size() * 1;
       B_ptrs[18] += VecType::size() * 1;
       B_ptrs[19] += VecType::size() * 1;
       B_ptrs[20] += VecType::size() * 1;
       B_ptrs[21] += VecType::size() * 1;
       B_ptrs[22] += VecType::size() * 1;
       B_ptrs[23] += VecType::size() * 1;
       B_ptrs[24] += VecType::size() * 1;
       B_ptrs[25] += VecType::size() * 1;
       B_ptrs[26] += VecType::size() * 1;
       B_ptrs[27] += VecType::size() * 1;
       B_ptrs[28] += VecType::size() * 1;
       B_ptrs[29] += VecType::size() * 1;
       B_ptrs[30] += VecType::size() * 1;
       B_ptrs[31] += VecType::size() * 1;
       B_ptrs[32] += VecType::size() * 1;
       B_ptrs[33] += VecType::size() * 1;
       B_ptrs[34] += VecType::size() * 1;
       B_ptrs[35] += VecType::size() * 1;
       B_ptrs[36] += VecType::size() * 1;
       B_ptrs[37] += VecType::size() * 1;
       B_ptrs[38] += VecType::size() * 1;
       B_ptrs[39] += VecType::size() * 1;
       B_ptrs[40] += VecType::size() * 1;
       B_ptrs[41] += VecType::size() * 1;
       B_ptrs[42] += VecType::size() * 1;
       B_ptrs[43] += VecType::size() * 1;
       B_ptrs[44] += VecType::size() * 1;
       B_ptrs[45] += VecType::size() * 1;
       B_ptrs[46] += VecType::size() * 1;
       B_ptrs[47] += VecType::size() * 1;
       B_ptrs[48] += VecType::size() * 1;
       B_ptrs[49] += VecType::size() * 1;
       B_ptrs[50] += VecType::size() * 1;
       B_ptrs[51] += VecType::size() * 1;
       B_ptrs[52] += VecType::size() * 1;
       B_ptrs[53] += VecType::size() * 1;
       B_ptrs[54] += VecType::size() * 1;
       B_ptrs[55] += VecType::size() * 1;
       B_ptrs[56] += VecType::size() * 1;
       B_ptrs[57] += VecType::size() * 1;
       B_ptrs[58] += VecType::size() * 1;
       B_ptrs[59] += VecType::size() * 1;
       B_ptrs[60] += VecType::size() * 1;
       B_ptrs[61] += VecType::size() * 1;
       B_ptrs[62] += VecType::size() * 1;
       B_ptrs[63] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_4_64_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[4];
    const typename StorageTypes::Scalar * B_ptrs[64];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 4; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 64; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;
    VecType aVec16;
    VecType aVec17;
    VecType aVec18;
    VecType aVec19;
    VecType aVec20;
    VecType aVec21;
    VecType aVec22;
    VecType aVec23;
    VecType aVec24;
    VecType aVec25;
    VecType aVec26;
    VecType aVec27;
    VecType aVec28;
    VecType aVec29;
    VecType aVec30;
    VecType aVec31;
    VecType aVec32;
    VecType aVec33;
    VecType aVec34;
    VecType aVec35;
    VecType aVec36;
    VecType aVec37;
    VecType aVec38;
    VecType aVec39;
    VecType aVec40;
    VecType aVec41;
    VecType aVec42;
    VecType aVec43;
    VecType aVec44;
    VecType aVec45;
    VecType aVec46;
    VecType aVec47;
    VecType aVec48;
    VecType aVec49;
    VecType aVec50;
    VecType aVec51;
    VecType aVec52;
    VecType aVec53;
    VecType aVec54;
    VecType aVec55;
    VecType aVec56;
    VecType aVec57;
    VecType aVec58;
    VecType aVec59;
    VecType aVec60;
    VecType aVec61;
    VecType aVec62;
    VecType aVec63;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       aVec0 = VecType(values[8 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[8 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[8 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[8 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       aVec0 = VecType(values[9 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[9 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[9 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[9 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       aVec0 = VecType(values[10 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[10 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[10 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[10 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       aVec0 = VecType(values[11 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[11 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[11 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[11 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       bVec1.load(B_ptrs[12] + 1 * VecType::size());
       aVec0 = VecType(values[12 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[12 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[12 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[12 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       bVec1.load(B_ptrs[13] + 1 * VecType::size());
       aVec0 = VecType(values[13 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[13 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[13 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[13 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       bVec1.load(B_ptrs[14] + 1 * VecType::size());
       aVec0 = VecType(values[14 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[14 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[14 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[14 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       bVec1.load(B_ptrs[15] + 1 * VecType::size());
       aVec0 = VecType(values[15 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[15 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[15 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[15 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[16] + 0 * VecType::size());
       bVec1.load(B_ptrs[16] + 1 * VecType::size());
       aVec0 = VecType(values[16 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[16 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[16 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[16 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[17] + 0 * VecType::size());
       bVec1.load(B_ptrs[17] + 1 * VecType::size());
       aVec0 = VecType(values[17 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[17 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[17 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[17 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[18] + 0 * VecType::size());
       bVec1.load(B_ptrs[18] + 1 * VecType::size());
       aVec0 = VecType(values[18 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[18 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[18 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[18 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[19] + 0 * VecType::size());
       bVec1.load(B_ptrs[19] + 1 * VecType::size());
       aVec0 = VecType(values[19 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[19 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[19 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[19 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[20] + 0 * VecType::size());
       bVec1.load(B_ptrs[20] + 1 * VecType::size());
       aVec0 = VecType(values[20 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[20 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[20 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[20 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[21] + 0 * VecType::size());
       bVec1.load(B_ptrs[21] + 1 * VecType::size());
       aVec0 = VecType(values[21 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[21 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[21 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[21 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[22] + 0 * VecType::size());
       bVec1.load(B_ptrs[22] + 1 * VecType::size());
       aVec0 = VecType(values[22 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[22 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[22 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[22 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[23] + 0 * VecType::size());
       bVec1.load(B_ptrs[23] + 1 * VecType::size());
       aVec0 = VecType(values[23 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[23 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[23 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[23 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[24] + 0 * VecType::size());
       bVec1.load(B_ptrs[24] + 1 * VecType::size());
       aVec0 = VecType(values[24 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[24 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[24 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[24 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[25] + 0 * VecType::size());
       bVec1.load(B_ptrs[25] + 1 * VecType::size());
       aVec0 = VecType(values[25 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[25 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[25 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[25 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[26] + 0 * VecType::size());
       bVec1.load(B_ptrs[26] + 1 * VecType::size());
       aVec0 = VecType(values[26 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[26 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[26 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[26 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[27] + 0 * VecType::size());
       bVec1.load(B_ptrs[27] + 1 * VecType::size());
       aVec0 = VecType(values[27 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[27 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[27 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[27 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[28] + 0 * VecType::size());
       bVec1.load(B_ptrs[28] + 1 * VecType::size());
       aVec0 = VecType(values[28 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[28 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[28 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[28 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[29] + 0 * VecType::size());
       bVec1.load(B_ptrs[29] + 1 * VecType::size());
       aVec0 = VecType(values[29 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[29 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[29 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[29 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[30] + 0 * VecType::size());
       bVec1.load(B_ptrs[30] + 1 * VecType::size());
       aVec0 = VecType(values[30 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[30 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[30 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[30 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[31] + 0 * VecType::size());
       bVec1.load(B_ptrs[31] + 1 * VecType::size());
       aVec0 = VecType(values[31 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[31 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[31 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[31 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[32] + 0 * VecType::size());
       bVec1.load(B_ptrs[32] + 1 * VecType::size());
       aVec0 = VecType(values[32 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[32 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[32 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[32 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[33] + 0 * VecType::size());
       bVec1.load(B_ptrs[33] + 1 * VecType::size());
       aVec0 = VecType(values[33 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[33 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[33 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[33 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[34] + 0 * VecType::size());
       bVec1.load(B_ptrs[34] + 1 * VecType::size());
       aVec0 = VecType(values[34 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[34 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[34 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[34 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[35] + 0 * VecType::size());
       bVec1.load(B_ptrs[35] + 1 * VecType::size());
       aVec0 = VecType(values[35 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[35 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[35 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[35 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[36] + 0 * VecType::size());
       bVec1.load(B_ptrs[36] + 1 * VecType::size());
       aVec0 = VecType(values[36 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[36 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[36 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[36 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[37] + 0 * VecType::size());
       bVec1.load(B_ptrs[37] + 1 * VecType::size());
       aVec0 = VecType(values[37 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[37 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[37 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[37 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[38] + 0 * VecType::size());
       bVec1.load(B_ptrs[38] + 1 * VecType::size());
       aVec0 = VecType(values[38 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[38 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[38 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[38 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[39] + 0 * VecType::size());
       bVec1.load(B_ptrs[39] + 1 * VecType::size());
       aVec0 = VecType(values[39 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[39 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[39 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[39 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[40] + 0 * VecType::size());
       bVec1.load(B_ptrs[40] + 1 * VecType::size());
       aVec0 = VecType(values[40 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[40 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[40 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[40 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[41] + 0 * VecType::size());
       bVec1.load(B_ptrs[41] + 1 * VecType::size());
       aVec0 = VecType(values[41 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[41 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[41 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[41 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[42] + 0 * VecType::size());
       bVec1.load(B_ptrs[42] + 1 * VecType::size());
       aVec0 = VecType(values[42 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[42 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[42 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[42 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[43] + 0 * VecType::size());
       bVec1.load(B_ptrs[43] + 1 * VecType::size());
       aVec0 = VecType(values[43 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[43 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[43 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[43 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[44] + 0 * VecType::size());
       bVec1.load(B_ptrs[44] + 1 * VecType::size());
       aVec0 = VecType(values[44 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[44 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[44 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[44 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[45] + 0 * VecType::size());
       bVec1.load(B_ptrs[45] + 1 * VecType::size());
       aVec0 = VecType(values[45 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[45 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[45 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[45 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[46] + 0 * VecType::size());
       bVec1.load(B_ptrs[46] + 1 * VecType::size());
       aVec0 = VecType(values[46 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[46 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[46 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[46 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[47] + 0 * VecType::size());
       bVec1.load(B_ptrs[47] + 1 * VecType::size());
       aVec0 = VecType(values[47 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[47 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[47 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[47 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[48] + 0 * VecType::size());
       bVec1.load(B_ptrs[48] + 1 * VecType::size());
       aVec0 = VecType(values[48 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[48 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[48 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[48 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[49] + 0 * VecType::size());
       bVec1.load(B_ptrs[49] + 1 * VecType::size());
       aVec0 = VecType(values[49 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[49 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[49 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[49 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[50] + 0 * VecType::size());
       bVec1.load(B_ptrs[50] + 1 * VecType::size());
       aVec0 = VecType(values[50 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[50 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[50 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[50 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[51] + 0 * VecType::size());
       bVec1.load(B_ptrs[51] + 1 * VecType::size());
       aVec0 = VecType(values[51 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[51 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[51 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[51 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[52] + 0 * VecType::size());
       bVec1.load(B_ptrs[52] + 1 * VecType::size());
       aVec0 = VecType(values[52 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[52 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[52 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[52 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[53] + 0 * VecType::size());
       bVec1.load(B_ptrs[53] + 1 * VecType::size());
       aVec0 = VecType(values[53 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[53 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[53 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[53 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[54] + 0 * VecType::size());
       bVec1.load(B_ptrs[54] + 1 * VecType::size());
       aVec0 = VecType(values[54 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[54 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[54 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[54 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[55] + 0 * VecType::size());
       bVec1.load(B_ptrs[55] + 1 * VecType::size());
       aVec0 = VecType(values[55 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[55 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[55 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[55 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[56] + 0 * VecType::size());
       bVec1.load(B_ptrs[56] + 1 * VecType::size());
       aVec0 = VecType(values[56 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[56 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[56 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[56 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[57] + 0 * VecType::size());
       bVec1.load(B_ptrs[57] + 1 * VecType::size());
       aVec0 = VecType(values[57 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[57 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[57 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[57 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[58] + 0 * VecType::size());
       bVec1.load(B_ptrs[58] + 1 * VecType::size());
       aVec0 = VecType(values[58 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[58 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[58 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[58 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[59] + 0 * VecType::size());
       bVec1.load(B_ptrs[59] + 1 * VecType::size());
       aVec0 = VecType(values[59 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[59 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[59 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[59 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[60] + 0 * VecType::size());
       bVec1.load(B_ptrs[60] + 1 * VecType::size());
       aVec0 = VecType(values[60 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[60 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[60 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[60 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[61] + 0 * VecType::size());
       bVec1.load(B_ptrs[61] + 1 * VecType::size());
       aVec0 = VecType(values[61 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[61 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[61 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[61 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[62] + 0 * VecType::size());
       bVec1.load(B_ptrs[62] + 1 * VecType::size());
       aVec0 = VecType(values[62 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[62 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[62 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[62 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       bVec0.load(B_ptrs[63] + 0 * VecType::size());
       bVec1.load(B_ptrs[63] + 1 * VecType::size());
       aVec0 = VecType(values[63 * 4 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[63 * 4 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[63 * 4 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[63 * 4 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
       B_ptrs[8] += VecType::size() * 2;
       B_ptrs[9] += VecType::size() * 2;
       B_ptrs[10] += VecType::size() * 2;
       B_ptrs[11] += VecType::size() * 2;
       B_ptrs[12] += VecType::size() * 2;
       B_ptrs[13] += VecType::size() * 2;
       B_ptrs[14] += VecType::size() * 2;
       B_ptrs[15] += VecType::size() * 2;
       B_ptrs[16] += VecType::size() * 2;
       B_ptrs[17] += VecType::size() * 2;
       B_ptrs[18] += VecType::size() * 2;
       B_ptrs[19] += VecType::size() * 2;
       B_ptrs[20] += VecType::size() * 2;
       B_ptrs[21] += VecType::size() * 2;
       B_ptrs[22] += VecType::size() * 2;
       B_ptrs[23] += VecType::size() * 2;
       B_ptrs[24] += VecType::size() * 2;
       B_ptrs[25] += VecType::size() * 2;
       B_ptrs[26] += VecType::size() * 2;
       B_ptrs[27] += VecType::size() * 2;
       B_ptrs[28] += VecType::size() * 2;
       B_ptrs[29] += VecType::size() * 2;
       B_ptrs[30] += VecType::size() * 2;
       B_ptrs[31] += VecType::size() * 2;
       B_ptrs[32] += VecType::size() * 2;
       B_ptrs[33] += VecType::size() * 2;
       B_ptrs[34] += VecType::size() * 2;
       B_ptrs[35] += VecType::size() * 2;
       B_ptrs[36] += VecType::size() * 2;
       B_ptrs[37] += VecType::size() * 2;
       B_ptrs[38] += VecType::size() * 2;
       B_ptrs[39] += VecType::size() * 2;
       B_ptrs[40] += VecType::size() * 2;
       B_ptrs[41] += VecType::size() * 2;
       B_ptrs[42] += VecType::size() * 2;
       B_ptrs[43] += VecType::size() * 2;
       B_ptrs[44] += VecType::size() * 2;
       B_ptrs[45] += VecType::size() * 2;
       B_ptrs[46] += VecType::size() * 2;
       B_ptrs[47] += VecType::size() * 2;
       B_ptrs[48] += VecType::size() * 2;
       B_ptrs[49] += VecType::size() * 2;
       B_ptrs[50] += VecType::size() * 2;
       B_ptrs[51] += VecType::size() * 2;
       B_ptrs[52] += VecType::size() * 2;
       B_ptrs[53] += VecType::size() * 2;
       B_ptrs[54] += VecType::size() * 2;
       B_ptrs[55] += VecType::size() * 2;
       B_ptrs[56] += VecType::size() * 2;
       B_ptrs[57] += VecType::size() * 2;
       B_ptrs[58] += VecType::size() * 2;
       B_ptrs[59] += VecType::size() * 2;
       B_ptrs[60] += VecType::size() * 2;
       B_ptrs[61] += VecType::size() * 2;
       B_ptrs[62] += VecType::size() * 2;
       B_ptrs[63] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_6_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[6];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 6; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       VecType cVec40;
       VecType cVec50;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       C_ptrs[4] += VecType::size() * 1;
       C_ptrs[5] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_6_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[6];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 6; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       VecType cVec40;
       VecType cVec41;
       VecType cVec50;
       VecType cVec51;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec41.load(C_ptrs[4] + 1 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec51.load(C_ptrs[5] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec41.store(C_ptrs[4] + 1 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec51.store(C_ptrs[5] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       C_ptrs[4] += VecType::size() * 2;
       C_ptrs[5] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_8_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[8];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 8; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       VecType cVec40;
       VecType cVec50;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[6 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[6 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[7 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[7 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       C_ptrs[4] += VecType::size() * 1;
       C_ptrs[5] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_8_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[8];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 8; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       VecType cVec40;
       VecType cVec41;
       VecType cVec50;
       VecType cVec51;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec41.load(C_ptrs[4] + 1 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec51.load(C_ptrs[5] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[6 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[6 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[7 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[7 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec41.store(C_ptrs[4] + 1 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec51.store(C_ptrs[5] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       C_ptrs[4] += VecType::size() * 2;
       C_ptrs[5] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_10_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[10];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 10; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       VecType cVec40;
       VecType cVec50;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[6 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[6 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[7 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[7 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       aVec0 = VecType(values[8 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[8 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[8 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[8 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[8 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[8 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       aVec0 = VecType(values[9 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[9 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[9 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[9 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[9 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[9 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       C_ptrs[4] += VecType::size() * 1;
       C_ptrs[5] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
       B_ptrs[8] += VecType::size() * 1;
       B_ptrs[9] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_10_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[10];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 10; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       VecType cVec40;
       VecType cVec41;
       VecType cVec50;
       VecType cVec51;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec41.load(C_ptrs[4] + 1 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec51.load(C_ptrs[5] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[6 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[6 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[7 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[7 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       aVec0 = VecType(values[8 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[8 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[8 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[8 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[8 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[8 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       aVec0 = VecType(values[9 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[9 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[9 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[9 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[9 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[9 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec41.store(C_ptrs[4] + 1 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec51.store(C_ptrs[5] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       C_ptrs[4] += VecType::size() * 2;
       C_ptrs[5] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
       B_ptrs[8] += VecType::size() * 2;
       B_ptrs[9] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_10_x_4(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[10];
    VecType cVecK0;
    VecType cVecK1;
    VecType cVecK2;
    VecType cVecK3;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 10; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 4) {
       VecType bVec0;
       VecType bVec1;
       VecType bVec2;
       VecType bVec3;
       VecType cVec00;
       VecType cVec01;
       VecType cVec02;
       VecType cVec03;
       VecType cVec10;
       VecType cVec11;
       VecType cVec12;
       VecType cVec13;
       VecType cVec20;
       VecType cVec21;
       VecType cVec22;
       VecType cVec23;
       VecType cVec30;
       VecType cVec31;
       VecType cVec32;
       VecType cVec33;
       VecType cVec40;
       VecType cVec41;
       VecType cVec42;
       VecType cVec43;
       VecType cVec50;
       VecType cVec51;
       VecType cVec52;
       VecType cVec53;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec02.load(C_ptrs[0] + 2 * VecType::size());
       cVec03.load(C_ptrs[0] + 3 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec12.load(C_ptrs[1] + 2 * VecType::size());
       cVec13.load(C_ptrs[1] + 3 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec22.load(C_ptrs[2] + 2 * VecType::size());
       cVec23.load(C_ptrs[2] + 3 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec32.load(C_ptrs[3] + 2 * VecType::size());
       cVec33.load(C_ptrs[3] + 3 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec41.load(C_ptrs[4] + 1 * VecType::size());
       cVec42.load(C_ptrs[4] + 2 * VecType::size());
       cVec43.load(C_ptrs[4] + 3 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec51.load(C_ptrs[5] + 1 * VecType::size());
       cVec52.load(C_ptrs[5] + 2 * VecType::size());
       cVec53.load(C_ptrs[5] + 3 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       bVec2.load(B_ptrs[0] + 2 * VecType::size());
       bVec3.load(B_ptrs[0] + 3 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       bVec2.load(B_ptrs[1] + 2 * VecType::size());
       bVec3.load(B_ptrs[1] + 3 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       bVec2.load(B_ptrs[2] + 2 * VecType::size());
       bVec3.load(B_ptrs[2] + 3 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       bVec2.load(B_ptrs[3] + 2 * VecType::size());
       bVec3.load(B_ptrs[3] + 3 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       bVec2.load(B_ptrs[4] + 2 * VecType::size());
       bVec3.load(B_ptrs[4] + 3 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       bVec2.load(B_ptrs[5] + 2 * VecType::size());
       bVec3.load(B_ptrs[5] + 3 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       bVec2.load(B_ptrs[6] + 2 * VecType::size());
       bVec3.load(B_ptrs[6] + 3 * VecType::size());
       aVec0 = VecType(values[6 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[6 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[6 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[6 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[6 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[6 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       bVec2.load(B_ptrs[7] + 2 * VecType::size());
       bVec3.load(B_ptrs[7] + 3 * VecType::size());
       aVec0 = VecType(values[7 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[7 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[7 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[7 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[7 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[7 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       bVec2.load(B_ptrs[8] + 2 * VecType::size());
       bVec3.load(B_ptrs[8] + 3 * VecType::size());
       aVec0 = VecType(values[8 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[8 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[8 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[8 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[8 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[8 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       bVec2.load(B_ptrs[9] + 2 * VecType::size());
       bVec3.load(B_ptrs[9] + 3 * VecType::size());
       aVec0 = VecType(values[9 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       cVec02 = mul_add(aVec0, bVec2, cVec02);
       cVec03 = mul_add(aVec0, bVec3, cVec03);
       aVec1 = VecType(values[9 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       cVec12 = mul_add(aVec1, bVec2, cVec12);
       cVec13 = mul_add(aVec1, bVec3, cVec13);
       aVec2 = VecType(values[9 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       cVec22 = mul_add(aVec2, bVec2, cVec22);
       cVec23 = mul_add(aVec2, bVec3, cVec23);
       aVec3 = VecType(values[9 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       cVec32 = mul_add(aVec3, bVec2, cVec32);
       cVec33 = mul_add(aVec3, bVec3, cVec33);
       aVec4 = VecType(values[9 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       cVec42 = mul_add(aVec4, bVec2, cVec42);
       cVec43 = mul_add(aVec4, bVec3, cVec43);
       aVec5 = VecType(values[9 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec52 = mul_add(aVec5, bVec2, cVec52);
       cVec53 = mul_add(aVec5, bVec3, cVec53);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec02.store(C_ptrs[0] + 2 * VecType::size());
       cVec03.store(C_ptrs[0] + 3 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec12.store(C_ptrs[1] + 2 * VecType::size());
       cVec13.store(C_ptrs[1] + 3 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec22.store(C_ptrs[2] + 2 * VecType::size());
       cVec23.store(C_ptrs[2] + 3 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec32.store(C_ptrs[3] + 2 * VecType::size());
       cVec33.store(C_ptrs[3] + 3 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec41.store(C_ptrs[4] + 1 * VecType::size());
       cVec42.store(C_ptrs[4] + 2 * VecType::size());
       cVec43.store(C_ptrs[4] + 3 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec51.store(C_ptrs[5] + 1 * VecType::size());
       cVec52.store(C_ptrs[5] + 2 * VecType::size());
       cVec53.store(C_ptrs[5] + 3 * VecType::size());
       C_ptrs[0] += VecType::size() * 4;
       C_ptrs[1] += VecType::size() * 4;
       C_ptrs[2] += VecType::size() * 4;
       C_ptrs[3] += VecType::size() * 4;
       C_ptrs[4] += VecType::size() * 4;
       C_ptrs[5] += VecType::size() * 4;
       B_ptrs[0] += VecType::size() * 4;
       B_ptrs[1] += VecType::size() * 4;
       B_ptrs[2] += VecType::size() * 4;
       B_ptrs[3] += VecType::size() * 4;
       B_ptrs[4] += VecType::size() * 4;
       B_ptrs[5] += VecType::size() * 4;
       B_ptrs[6] += VecType::size() * 4;
       B_ptrs[7] += VecType::size() * 4;
       B_ptrs[8] += VecType::size() * 4;
       B_ptrs[9] += VecType::size() * 4;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_16_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[16];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 16; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       VecType cVec40;
       VecType cVec50;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[6 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[6 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[7 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[7 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       aVec0 = VecType(values[8 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[8 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[8 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[8 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[8 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[8 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       aVec0 = VecType(values[9 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[9 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[9 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[9 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[9 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[9 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       aVec0 = VecType(values[10 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[10 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[10 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[10 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[10 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[10 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       aVec0 = VecType(values[11 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[11 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[11 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[11 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[11 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[11 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       aVec0 = VecType(values[12 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[12 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[12 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[12 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[12 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[12 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       aVec0 = VecType(values[13 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[13 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[13 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[13 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[13 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[13 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       aVec0 = VecType(values[14 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[14 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[14 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[14 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[14 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[14 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       aVec0 = VecType(values[15 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[15 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[15 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[15 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[15 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[15 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       C_ptrs[4] += VecType::size() * 1;
       C_ptrs[5] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
       B_ptrs[8] += VecType::size() * 1;
       B_ptrs[9] += VecType::size() * 1;
       B_ptrs[10] += VecType::size() * 1;
       B_ptrs[11] += VecType::size() * 1;
       B_ptrs[12] += VecType::size() * 1;
       B_ptrs[13] += VecType::size() * 1;
       B_ptrs[14] += VecType::size() * 1;
       B_ptrs[15] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_6_16_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[6];
    const typename StorageTypes::Scalar * B_ptrs[16];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 6; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 16; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       VecType cVec40;
       VecType cVec41;
       VecType cVec50;
       VecType cVec51;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec41.load(C_ptrs[4] + 1 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec51.load(C_ptrs[5] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[0 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[0 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[1 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[1 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[2 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[2 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[3 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[3 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[4 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[4 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[5 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[5 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[6 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[6 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[7 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[7 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       aVec0 = VecType(values[8 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[8 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[8 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[8 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[8 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[8 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       aVec0 = VecType(values[9 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[9 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[9 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[9 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[9 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[9 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       aVec0 = VecType(values[10 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[10 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[10 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[10 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[10 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[10 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       aVec0 = VecType(values[11 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[11 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[11 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[11 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[11 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[11 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       bVec1.load(B_ptrs[12] + 1 * VecType::size());
       aVec0 = VecType(values[12 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[12 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[12 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[12 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[12 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[12 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       bVec1.load(B_ptrs[13] + 1 * VecType::size());
       aVec0 = VecType(values[13 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[13 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[13 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[13 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[13 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[13 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       bVec1.load(B_ptrs[14] + 1 * VecType::size());
       aVec0 = VecType(values[14 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[14 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[14 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[14 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[14 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[14 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       bVec1.load(B_ptrs[15] + 1 * VecType::size());
       aVec0 = VecType(values[15 * 6 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[15 * 6 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[15 * 6 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[15 * 6 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[15 * 6 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[15 * 6 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec41.store(C_ptrs[4] + 1 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec51.store(C_ptrs[5] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       C_ptrs[4] += VecType::size() * 2;
       C_ptrs[5] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
       B_ptrs[8] += VecType::size() * 2;
       B_ptrs[9] += VecType::size() * 2;
       B_ptrs[10] += VecType::size() * 2;
       B_ptrs[11] += VecType::size() * 2;
       B_ptrs[12] += VecType::size() * 2;
       B_ptrs[13] += VecType::size() * 2;
       B_ptrs[14] += VecType::size() * 2;
       B_ptrs[15] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_8_8_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[8];
    const typename StorageTypes::Scalar * B_ptrs[8];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 8; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 8; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       VecType cVec40;
       VecType cVec50;
       VecType cVec60;
       VecType cVec70;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec60.load(C_ptrs[6] + 0 * VecType::size());
       cVec70.load(C_ptrs[7] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[0 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[0 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[0 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[0 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[1 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[1 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[1 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[1 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[2 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[2 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[2 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[2 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[3 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[3 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[3 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[3 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[4 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[4 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[4 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[4 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[5 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[5 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[5 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[5 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[6 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[6 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[6 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[6 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[7 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[7 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[7 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[7 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec60.store(C_ptrs[6] + 0 * VecType::size());
       cVec70.store(C_ptrs[7] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       C_ptrs[4] += VecType::size() * 1;
       C_ptrs[5] += VecType::size() * 1;
       C_ptrs[6] += VecType::size() * 1;
       C_ptrs[7] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_8_8_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[8];
    const typename StorageTypes::Scalar * B_ptrs[8];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 8; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 8; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       VecType cVec40;
       VecType cVec41;
       VecType cVec50;
       VecType cVec51;
       VecType cVec60;
       VecType cVec61;
       VecType cVec70;
       VecType cVec71;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec41.load(C_ptrs[4] + 1 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec51.load(C_ptrs[5] + 1 * VecType::size());
       cVec60.load(C_ptrs[6] + 0 * VecType::size());
       cVec61.load(C_ptrs[6] + 1 * VecType::size());
       cVec70.load(C_ptrs[7] + 0 * VecType::size());
       cVec71.load(C_ptrs[7] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[0 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[0 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[0 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[0 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[1 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[1 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[1 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[1 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[2 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[2 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[2 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[2 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[3 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[3 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[3 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[3 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[4 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[4 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[4 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[4 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[5 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[5 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[5 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[5 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[6 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[6 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[6 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[6 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[7 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[7 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[7 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[7 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec41.store(C_ptrs[4] + 1 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec51.store(C_ptrs[5] + 1 * VecType::size());
       cVec60.store(C_ptrs[6] + 0 * VecType::size());
       cVec61.store(C_ptrs[6] + 1 * VecType::size());
       cVec70.store(C_ptrs[7] + 0 * VecType::size());
       cVec71.store(C_ptrs[7] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       C_ptrs[4] += VecType::size() * 2;
       C_ptrs[5] += VecType::size() * 2;
       C_ptrs[6] += VecType::size() * 2;
       C_ptrs[7] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_8_16_x_1(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[8];
    const typename StorageTypes::Scalar * B_ptrs[16];
    VecType cVecK0;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 8; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 16; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 1) {
       VecType bVec0;
       VecType cVec00;
       VecType cVec10;
       VecType cVec20;
       VecType cVec30;
       VecType cVec40;
       VecType cVec50;
       VecType cVec60;
       VecType cVec70;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec60.load(C_ptrs[6] + 0 * VecType::size());
       cVec70.load(C_ptrs[7] + 0 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       aVec0 = VecType(values[0 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[0 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[0 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[0 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[0 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[0 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[0 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[0 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       aVec0 = VecType(values[1 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[1 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[1 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[1 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[1 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[1 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[1 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[1 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       aVec0 = VecType(values[2 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[2 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[2 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[2 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[2 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[2 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[2 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[2 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       aVec0 = VecType(values[3 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[3 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[3 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[3 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[3 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[3 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[3 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[3 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       aVec0 = VecType(values[4 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[4 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[4 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[4 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[4 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[4 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[4 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[4 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       aVec0 = VecType(values[5 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[5 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[5 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[5 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[5 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[5 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[5 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[5 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       aVec0 = VecType(values[6 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[6 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[6 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[6 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[6 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[6 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[6 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[6 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       aVec0 = VecType(values[7 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[7 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[7 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[7 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[7 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[7 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[7 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[7 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       aVec0 = VecType(values[8 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[8 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[8 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[8 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[8 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[8 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[8 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[8 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       aVec0 = VecType(values[9 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[9 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[9 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[9 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[9 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[9 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[9 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[9 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       aVec0 = VecType(values[10 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[10 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[10 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[10 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[10 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[10 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[10 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[10 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       aVec0 = VecType(values[11 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[11 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[11 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[11 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[11 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[11 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[11 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[11 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       aVec0 = VecType(values[12 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[12 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[12 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[12 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[12 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[12 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[12 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[12 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       aVec0 = VecType(values[13 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[13 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[13 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[13 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[13 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[13 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[13 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[13 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       aVec0 = VecType(values[14 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[14 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[14 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[14 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[14 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[14 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[14 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[14 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       aVec0 = VecType(values[15 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       aVec1 = VecType(values[15 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       aVec2 = VecType(values[15 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       aVec3 = VecType(values[15 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       aVec4 = VecType(values[15 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       aVec5 = VecType(values[15 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       aVec6 = VecType(values[15 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       aVec7 = VecType(values[15 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec60.store(C_ptrs[6] + 0 * VecType::size());
       cVec70.store(C_ptrs[7] + 0 * VecType::size());
       C_ptrs[0] += VecType::size() * 1;
       C_ptrs[1] += VecType::size() * 1;
       C_ptrs[2] += VecType::size() * 1;
       C_ptrs[3] += VecType::size() * 1;
       C_ptrs[4] += VecType::size() * 1;
       C_ptrs[5] += VecType::size() * 1;
       C_ptrs[6] += VecType::size() * 1;
       C_ptrs[7] += VecType::size() * 1;
       B_ptrs[0] += VecType::size() * 1;
       B_ptrs[1] += VecType::size() * 1;
       B_ptrs[2] += VecType::size() * 1;
       B_ptrs[3] += VecType::size() * 1;
       B_ptrs[4] += VecType::size() * 1;
       B_ptrs[5] += VecType::size() * 1;
       B_ptrs[6] += VecType::size() * 1;
       B_ptrs[7] += VecType::size() * 1;
       B_ptrs[8] += VecType::size() * 1;
       B_ptrs[9] += VecType::size() * 1;
       B_ptrs[10] += VecType::size() * 1;
       B_ptrs[11] += VecType::size() * 1;
       B_ptrs[12] += VecType::size() * 1;
       B_ptrs[13] += VecType::size() * 1;
       B_ptrs[14] += VecType::size() * 1;
       B_ptrs[15] += VecType::size() * 1;
    }
}


template<typename VecType, typename StorageTypes>
__inline __attribute__((__always_inline__)) void _coo_block_8_16_x_2(
        int b_vecs,
        int m, int k, int n, int _i, int j,
        const typename StorageTypes::Scalar *__restrict__ values,
        const typename StorageTypes::Index *__restrict__ row_indices,
        const typename StorageTypes::Index *__restrict__ column_indices,
        const typename StorageTypes::Scalar *__restrict__ B,
        typename StorageTypes::Scalar *__restrict__ C)
{
    typename StorageTypes::Scalar * C_ptrs[8];
    const typename StorageTypes::Scalar * B_ptrs[16];
    VecType cVecK0;
    VecType cVecK1;

    #pragma ivdep
    #pragma vector nontemporal (row_indices)
    #pragma prefetch row_indices:_MM_HINT_T1
    #pragma temporal (C_ptrs)
    for (int i = 0; i < 8; i ++) {
        C_ptrs[i] = (typename StorageTypes::Scalar *) uintptr_t(C) + uintptr_t(row_indices[i]) * n;
    }

    #pragma ivdep
    #pragma vector nontemporal (column_indices)
    #pragma prefetch column_indices:_MM_HINT_T1
    #pragma temporal (B_ptrs)
    for (int i = 0; i < 16; i ++) {
        B_ptrs[i] = (const typename StorageTypes::Scalar *) uintptr_t(B) + uintptr_t(column_indices[i]) * n;
    }

    VecType aVec0;
    VecType aVec1;
    VecType aVec2;
    VecType aVec3;
    VecType aVec4;
    VecType aVec5;
    VecType aVec6;
    VecType aVec7;
    VecType aVec8;
    VecType aVec9;
    VecType aVec10;
    VecType aVec11;
    VecType aVec12;
    VecType aVec13;
    VecType aVec14;
    VecType aVec15;

    #pragma unroll
    for (int b_vec = 0; b_vec < b_vecs; b_vec += 2) {
       VecType bVec0;
       VecType bVec1;
       VecType cVec00;
       VecType cVec01;
       VecType cVec10;
       VecType cVec11;
       VecType cVec20;
       VecType cVec21;
       VecType cVec30;
       VecType cVec31;
       VecType cVec40;
       VecType cVec41;
       VecType cVec50;
       VecType cVec51;
       VecType cVec60;
       VecType cVec61;
       VecType cVec70;
       VecType cVec71;
       cVec00.load(C_ptrs[0] + 0 * VecType::size());
       cVec01.load(C_ptrs[0] + 1 * VecType::size());
       cVec10.load(C_ptrs[1] + 0 * VecType::size());
       cVec11.load(C_ptrs[1] + 1 * VecType::size());
       cVec20.load(C_ptrs[2] + 0 * VecType::size());
       cVec21.load(C_ptrs[2] + 1 * VecType::size());
       cVec30.load(C_ptrs[3] + 0 * VecType::size());
       cVec31.load(C_ptrs[3] + 1 * VecType::size());
       cVec40.load(C_ptrs[4] + 0 * VecType::size());
       cVec41.load(C_ptrs[4] + 1 * VecType::size());
       cVec50.load(C_ptrs[5] + 0 * VecType::size());
       cVec51.load(C_ptrs[5] + 1 * VecType::size());
       cVec60.load(C_ptrs[6] + 0 * VecType::size());
       cVec61.load(C_ptrs[6] + 1 * VecType::size());
       cVec70.load(C_ptrs[7] + 0 * VecType::size());
       cVec71.load(C_ptrs[7] + 1 * VecType::size());
       bVec0.load(B_ptrs[0] + 0 * VecType::size());
       bVec1.load(B_ptrs[0] + 1 * VecType::size());
       aVec0 = VecType(values[0 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[0 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[0 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[0 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[0 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[0 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[0 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[0 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[1] + 0 * VecType::size());
       bVec1.load(B_ptrs[1] + 1 * VecType::size());
       aVec0 = VecType(values[1 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[1 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[1 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[1 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[1 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[1 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[1 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[1 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[2] + 0 * VecType::size());
       bVec1.load(B_ptrs[2] + 1 * VecType::size());
       aVec0 = VecType(values[2 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[2 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[2 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[2 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[2 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[2 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[2 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[2 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[3] + 0 * VecType::size());
       bVec1.load(B_ptrs[3] + 1 * VecType::size());
       aVec0 = VecType(values[3 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[3 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[3 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[3 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[3 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[3 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[3 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[3 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[4] + 0 * VecType::size());
       bVec1.load(B_ptrs[4] + 1 * VecType::size());
       aVec0 = VecType(values[4 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[4 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[4 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[4 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[4 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[4 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[4 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[4 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[5] + 0 * VecType::size());
       bVec1.load(B_ptrs[5] + 1 * VecType::size());
       aVec0 = VecType(values[5 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[5 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[5 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[5 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[5 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[5 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[5 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[5 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[6] + 0 * VecType::size());
       bVec1.load(B_ptrs[6] + 1 * VecType::size());
       aVec0 = VecType(values[6 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[6 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[6 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[6 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[6 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[6 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[6 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[6 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[7] + 0 * VecType::size());
       bVec1.load(B_ptrs[7] + 1 * VecType::size());
       aVec0 = VecType(values[7 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[7 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[7 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[7 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[7 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[7 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[7 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[7 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[8] + 0 * VecType::size());
       bVec1.load(B_ptrs[8] + 1 * VecType::size());
       aVec0 = VecType(values[8 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[8 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[8 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[8 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[8 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[8 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[8 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[8 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[9] + 0 * VecType::size());
       bVec1.load(B_ptrs[9] + 1 * VecType::size());
       aVec0 = VecType(values[9 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[9 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[9 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[9 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[9 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[9 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[9 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[9 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[10] + 0 * VecType::size());
       bVec1.load(B_ptrs[10] + 1 * VecType::size());
       aVec0 = VecType(values[10 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[10 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[10 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[10 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[10 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[10 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[10 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[10 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[11] + 0 * VecType::size());
       bVec1.load(B_ptrs[11] + 1 * VecType::size());
       aVec0 = VecType(values[11 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[11 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[11 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[11 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[11 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[11 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[11 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[11 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[12] + 0 * VecType::size());
       bVec1.load(B_ptrs[12] + 1 * VecType::size());
       aVec0 = VecType(values[12 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[12 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[12 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[12 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[12 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[12 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[12 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[12 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[13] + 0 * VecType::size());
       bVec1.load(B_ptrs[13] + 1 * VecType::size());
       aVec0 = VecType(values[13 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[13 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[13 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[13 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[13 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[13 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[13 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[13 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[14] + 0 * VecType::size());
       bVec1.load(B_ptrs[14] + 1 * VecType::size());
       aVec0 = VecType(values[14 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[14 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[14 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[14 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[14 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[14 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[14 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[14 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       bVec0.load(B_ptrs[15] + 0 * VecType::size());
       bVec1.load(B_ptrs[15] + 1 * VecType::size());
       aVec0 = VecType(values[15 * 8 + 0]);
       cVec00 = mul_add(aVec0, bVec0, cVec00);
       cVec01 = mul_add(aVec0, bVec1, cVec01);
       aVec1 = VecType(values[15 * 8 + 1]);
       cVec10 = mul_add(aVec1, bVec0, cVec10);
       cVec11 = mul_add(aVec1, bVec1, cVec11);
       aVec2 = VecType(values[15 * 8 + 2]);
       cVec20 = mul_add(aVec2, bVec0, cVec20);
       cVec21 = mul_add(aVec2, bVec1, cVec21);
       aVec3 = VecType(values[15 * 8 + 3]);
       cVec30 = mul_add(aVec3, bVec0, cVec30);
       cVec31 = mul_add(aVec3, bVec1, cVec31);
       aVec4 = VecType(values[15 * 8 + 4]);
       cVec40 = mul_add(aVec4, bVec0, cVec40);
       cVec41 = mul_add(aVec4, bVec1, cVec41);
       aVec5 = VecType(values[15 * 8 + 5]);
       cVec50 = mul_add(aVec5, bVec0, cVec50);
       cVec51 = mul_add(aVec5, bVec1, cVec51);
       aVec6 = VecType(values[15 * 8 + 6]);
       cVec60 = mul_add(aVec6, bVec0, cVec60);
       cVec61 = mul_add(aVec6, bVec1, cVec61);
       aVec7 = VecType(values[15 * 8 + 7]);
       cVec70 = mul_add(aVec7, bVec0, cVec70);
       cVec71 = mul_add(aVec7, bVec1, cVec71);
       cVec00.store(C_ptrs[0] + 0 * VecType::size());
       cVec01.store(C_ptrs[0] + 1 * VecType::size());
       cVec10.store(C_ptrs[1] + 0 * VecType::size());
       cVec11.store(C_ptrs[1] + 1 * VecType::size());
       cVec20.store(C_ptrs[2] + 0 * VecType::size());
       cVec21.store(C_ptrs[2] + 1 * VecType::size());
       cVec30.store(C_ptrs[3] + 0 * VecType::size());
       cVec31.store(C_ptrs[3] + 1 * VecType::size());
       cVec40.store(C_ptrs[4] + 0 * VecType::size());
       cVec41.store(C_ptrs[4] + 1 * VecType::size());
       cVec50.store(C_ptrs[5] + 0 * VecType::size());
       cVec51.store(C_ptrs[5] + 1 * VecType::size());
       cVec60.store(C_ptrs[6] + 0 * VecType::size());
       cVec61.store(C_ptrs[6] + 1 * VecType::size());
       cVec70.store(C_ptrs[7] + 0 * VecType::size());
       cVec71.store(C_ptrs[7] + 1 * VecType::size());
       C_ptrs[0] += VecType::size() * 2;
       C_ptrs[1] += VecType::size() * 2;
       C_ptrs[2] += VecType::size() * 2;
       C_ptrs[3] += VecType::size() * 2;
       C_ptrs[4] += VecType::size() * 2;
       C_ptrs[5] += VecType::size() * 2;
       C_ptrs[6] += VecType::size() * 2;
       C_ptrs[7] += VecType::size() * 2;
       B_ptrs[0] += VecType::size() * 2;
       B_ptrs[1] += VecType::size() * 2;
       B_ptrs[2] += VecType::size() * 2;
       B_ptrs[3] += VecType::size() * 2;
       B_ptrs[4] += VecType::size() * 2;
       B_ptrs[5] += VecType::size() * 2;
       B_ptrs[6] += VecType::size() * 2;
       B_ptrs[7] += VecType::size() * 2;
       B_ptrs[8] += VecType::size() * 2;
       B_ptrs[9] += VecType::size() * 2;
       B_ptrs[10] += VecType::size() * 2;
       B_ptrs[11] += VecType::size() * 2;
       B_ptrs[12] += VecType::size() * 2;
       B_ptrs[13] += VecType::size() * 2;
       B_ptrs[14] += VecType::size() * 2;
       B_ptrs[15] += VecType::size() * 2;
    }
}

